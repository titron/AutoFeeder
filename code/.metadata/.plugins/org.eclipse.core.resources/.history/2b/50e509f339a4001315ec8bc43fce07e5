/*****************************************************************************
 * DISCLAIMER
 *
 * This software is supplied by Renesas Electronics Corporation and is only
 * intended for use with Renesas products. No other uses are authorized.
 * This software is owned by Renesas Electronics Corporation and is protected
 * under all applicable laws, including copyright laws.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES
 * REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY,
 * INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY
 * DISCLAIMED.
 *
 * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS
 * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
 * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
 * FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS
 * AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 *
 * Renesas reserves the right, without notice, to make changes to this
 * software and to discontinue the availability of this software.
 * By using this software, you agree to the additional terms and
 * conditions found by accessing the following link:
 * http://www.renesas.com/disclaimer
 *****************************************************************************/
/* Copyright (C) 2010 Renesas Electronics Corporation. All rights reserved.  */
/******************************************************************************
* System Name	: AE1-LF Car Audio Demo
* File Name 	: if_disp_draw.c
* Abstract 		: interface of disp
* Version 		: Ver 0.10
* Device 		: R8C/2A group, or R8C/2B group, or 78K0 group
* Tool-Chain 	: High-performance Embedded Workshop (Version 4.08.00.011)
* 				: C Compiler Package for M16C Series M3T-NC30WA(V.5.45 Release 00)
* OS 			: None
* H/W Platform 	: AE1-LF demo board
* Description 	: This is interface of disp.
* Operation 	: 
* Limitation 	: This program can be operated by 20MHz only.
*******************************************************************************
* History 		: Dec.16,2010 Ver. 0.10 First Release
* 				:
*******************************************************************************/

/*****************************************************************************
 Includes   <System Includes> , "Project Includes"
 *****************************************************************************/
#include <stdlib.h>
#include "basictype.h"
#include "config.h"
#include "drv_oled.h"
#include "if_oled_draw.h"

/*****************************************************************************
 Typedef definitions
 *****************************************************************************/

/*****************************************************************************
 Macro definitions
 *****************************************************************************/
#define FLASH_ADDRESS_BMPLOGO    (U32)0x0FF7C0

/*****************************************************************************
 Imported global variables and functions (from other files)
 *****************************************************************************/

/*****************************************************************************
 Exported global variables and functions (to be accessed by other files)
 *****************************************************************************/


/*****************************************************************************
 Private variables and functions
 *****************************************************************************/
#if 1
const U8 BmpLogo[320]=
{
/*
;  宽×高（像素）: 128×20
;  字模格式/大小 : 单色点阵液晶字模，横向取模，字节正序/320字节
------------------------------------------------------------------------------*/
0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,
0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,
0x00U,0x03U,0xFCU,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,
0x00U,0x1FU,0xFFU,0x80U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,
0x00U,0xFCU,0x3FU,0xC0U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,
0x00U,0xC0U,0x0FU,0xC3U,0xFFU,0xBEU,0x07U,0x07U,0xFFU,0x0FU,0xFEU,0x03U,0xC0U,0x3FU,0xF8U,0x00U,
0x00U,0x00U,0x0FU,0xCFU,0xFFU,0x3FU,0x07U,0x1FU,0xFEU,0x7FU,0xFCU,0x0FU,0xE0U,0xFFU,0xF0U,0x00U,
0x00U,0x00U,0x0FU,0xDFU,0xFFU,0x3FU,0x07U,0x3FU,0xFEU,0x7FU,0xFCU,0x0FU,0xE1U,0xFFU,0xF0U,0x00U,
0x00U,0x00U,0x1FU,0x9FU,0x00U,0x3FU,0x87U,0x3EU,0x00U,0x7EU,0x00U,0x1FU,0xF1U,0xF8U,0x00U,0x00U,
0x00U,0x00U,0x7FU,0x1EU,0x00U,0x3FU,0xC7U,0x3EU,0x00U,0x7FU,0x80U,0x1EU,0xF9U,0xFFU,0x00U,0x00U,
0x00U,0x7EU,0xFCU,0x1FU,0xFFU,0x3BU,0xE7U,0x3FU,0xFEU,0x7FU,0xF8U,0x3EU,0xF8U,0xFFU,0xE0U,0x00U,
0x00U,0x7EU,0x7CU,0x1FU,0xFEU,0x39U,0xF7U,0x3FU,0xFEU,0x0FU,0xFEU,0x7CU,0x7CU,0x3FU,0xF8U,0x00U,
0x00U,0x7EU,0x7EU,0x1EU,0x00U,0x39U,0xFFU,0x3EU,0x00U,0x01U,0xFEU,0x78U,0x3EU,0x03U,0xF8U,0x00U,
0x00U,0x7EU,0x1FU,0x1FU,0x00U,0x38U,0xFFU,0x3EU,0x00U,0x00U,0x7EU,0xF8U,0x3EU,0x00U,0xF8U,0x00U,
0x00U,0x7EU,0x0FU,0x9FU,0xFFU,0xB8U,0x7FU,0x3FU,0xFFU,0x7FU,0xFFU,0xF3U,0xFFU,0xFFU,0xF8U,0x00U,
0x00U,0x7EU,0x07U,0xCFU,0xFFU,0x38U,0x3FU,0x1FU,0xFFU,0x7FU,0xFFU,0xF3U,0xFFU,0xFFU,0xF8U,0x00U,
0x00U,0x00U,0x03U,0xF3U,0xFFU,0x38U,0x1FU,0x07U,0xFEU,0xFFU,0xFBU,0xE7U,0xFFU,0xFFU,0xE0U,0x00U,
0x00U,0x00U,0x00U,0xF8U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,
0x00U,0x00U,0x00U,0x1CU,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,
0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,
};

#endif

#if 1
const U8 SetsoundAdjBMP[]=
{
	/*------------------------------------------------------------------------------
	;  宽×高（像素）: 80×52
	;  字模格式/大小 : 单色点阵液晶字模，横向取模，字节正序/520字节
	------------------------------------------------------------------------------*/
	0x04U,0x00U,0x00U,0x3FU,0xFFU,0xFFU,0xF0U,0x00U,0x00U,0x80U,0x08U,0x40U,0x00U,0xC0U,0x00U,0x00U,
	0x0CU,0x00U,0x08U,0x40U,0x12U,0x60U,0x01U,0x06U,0x00U,0x01U,0x82U,0x00U,0x19U,0x20U,0x14U,0x70U,
	0x01U,0x09U,0x00U,0x02U,0x42U,0x00U,0x38U,0xA0U,0x25U,0x7FU,0x02U,0x09U,0x00U,0x02U,0x41U,0x03U,
	0xFAU,0x90U,0x2AU,0x7FU,0x02U,0x06U,0x00U,0x01U,0x81U,0x03U,0xF9U,0x50U,0x2AU,0x7FU,0x02U,0x00U,
	0x00U,0x00U,0x01U,0x03U,0xF9U,0x50U,0x2AU,0x7FU,0x06U,0x00U,0x00U,0x00U,0x01U,0x83U,0xF9U,0x50U,
	0x25U,0x7FU,0x09U,0x00U,0x00U,0x00U,0x02U,0x43U,0xFAU,0x90U,0x14U,0x70U,0x09U,0x00U,0x00U,0x00U,
	0x02U,0x40U,0x38U,0xA0U,0x12U,0x60U,0x09U,0x00U,0x00U,0x00U,0x02U,0x40U,0x19U,0x20U,0x08U,0x40U,
	0x09U,0x00U,0x00U,0x00U,0x02U,0x40U,0x08U,0x40U,0x04U,0x00U,0x09U,0x00U,0x00U,0x00U,0x02U,0x40U,
	0x00U,0x80U,0x00U,0x00U,0x09U,0x07U,0xFFU,0xFFU,0x82U,0x40U,0x00U,0x00U,0x00U,0x00U,0x09U,0x18U,
	0x00U,0x00U,0x62U,0x40U,0x00U,0x00U,0x00U,0x00U,0x06U,0x10U,0x00U,0x00U,0x21U,0x80U,0x00U,0x00U,
	0x00U,0x00U,0x02U,0x28U,0x00U,0x00U,0x51U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x28U,0x00U,0x00U,
	0x51U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x24U,0x00U,0x00U,0x91U,0x00U,0x00U,0x00U,0x00U,0x00U,
	0x02U,0x24U,0x00U,0x00U,0x91U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x22U,0x00U,0x01U,0x11U,0x00U,
	0x00U,0x00U,0x00U,0x00U,0x02U,0x22U,0x00U,0x01U,0x11U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x21U,
	0x00U,0x02U,0x11U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x21U,0x00U,0x02U,0x11U,0x00U,0x00U,0x00U,
	0x00U,0x00U,0x02U,0x20U,0xFFU,0xFCU,0x11U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x20U,0x80U,0x04U,
	0x11U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x21U,0x00U,0x02U,0x11U,0x00U,0x00U,0x00U,0x00U,0x00U,
	0x02U,0x21U,0x00U,0x02U,0x11U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x21U,0x00U,0x02U,0x11U,0x00U,
	0x00U,0x00U,0x00U,0x00U,0x02U,0x21U,0x00U,0x02U,0x11U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x21U,
	0x00U,0x02U,0x11U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x21U,0x00U,0x02U,0x11U,0x00U,0x00U,0x00U,
	0x00U,0x00U,0x02U,0x21U,0x00U,0x02U,0x11U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x21U,0x00U,0x02U,
	0x11U,0x00U,0x00U,0x00U,0x00U,0x00U,0x02U,0x21U,0x00U,0x02U,0x11U,0x00U,0x00U,0x00U,0x04U,0x00U,
	0x02U,0x21U,0x00U,0x02U,0x11U,0x00U,0x00U,0x80U,0x08U,0x40U,0x02U,0x21U,0x00U,0x02U,0x11U,0x00U,
	0x08U,0x40U,0x12U,0x60U,0x06U,0x21U,0x00U,0x02U,0x11U,0x80U,0x19U,0x20U,0x14U,0x70U,0x09U,0x21U,
	0x00U,0x02U,0x12U,0x40U,0x38U,0xA0U,0x25U,0x7FU,0x09U,0x21U,0x00U,0x02U,0x12U,0x43U,0xFAU,0x90U,
	0x2AU,0x7FU,0x09U,0x21U,0x00U,0x02U,0x12U,0x43U,0xF9U,0x50U,0x2AU,0x7FU,0x09U,0x21U,0x00U,0x02U,
	0x12U,0x43U,0xF9U,0x50U,0x2AU,0x7FU,0x09U,0x20U,0x80U,0x04U,0x12U,0x43U,0xF9U,0x50U,0x25U,0x7FU,
	0x09U,0x21U,0x7FU,0xFAU,0x12U,0x43U,0xFAU,0x90U,0x14U,0x70U,0x09U,0x26U,0x00U,0x01U,0x92U,0x40U,
	0x38U,0xA0U,0x12U,0x60U,0x06U,0x18U,0x00U,0x00U,0x61U,0x80U,0x19U,0x20U,0x08U,0x40U,0x02U,0x18U,
	0x00U,0x00U,0x61U,0x00U,0x08U,0x40U,0x04U,0x00U,0x02U,0x07U,0xFFU,0xFFU,0x81U,0x00U,0x00U,0x80U,
	0x00U,0x00U,0x01U,0x00U,0x00U,0x00U,0x02U,0x00U,0x00U,0x00U,0x00U,0x00U,0x01U,0x00U,0x00U,0x00U,
	0x02U,0x00U,0x00U,0x00U,0x00U,0x00U,0x00U,0xC0U,0x00U,0x00U,0x0CU,0x00U,0x00U,0x00U,0x00U,0x00U,
	0x00U,0x3FU,0xFFU,0xFFU,0xF0U,0x00U,0x00U,0x00U,
};

const U8 fishBmp[] = {
		/*--  宽度x高度=64x40  --*/
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,
		0x00,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,
		0x00,0x00,0x01,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,
		0x00,0x00,0x0F,0xFC,0x3F,0xF0,0x00,0x00,0x00,0x00,0x3F,0xF0,0x0F,0xFC,0x00,0x00,
		0x00,0x00,0xFF,0xC0,0x03,0xFF,0x00,0x00,0x00,0x01,0xFF,0x80,0x00,0xFF,0x80,0x00,
		0x00,0x01,0xFE,0x00,0x00,0x7F,0x80,0x00,0x00,0x01,0xF8,0x00,0x00,0x1F,0x80,0x00,
		0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x00,0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x00,
		0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x00,0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x00,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x00,0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x00,
		0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x00,0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x00,
		0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x00,0x00,0x01,0xF8,0x00,0x00,0x1F,0x80,0x00,
		0x00,0x01,0xFE,0x00,0x00,0x7F,0x80,0x00,0x00,0x01,0xFF,0x80,0x00,0xFF,0x80,0x00,
		0x00,0x00,0xFF,0xC0,0x03,0xFF,0x00,0x00,0x00,0x00,0x3F,0xF0,0x0F,0xFC,0x00,0x00,
		0x00,0x00,0x0F,0xFC,0x3F,0xF0,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,
		0x00,0x00,0x01,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,
		0x00,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,
		0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
#endif

static BMPINFO bmp_info[]={{BMP_LOGO_NO,(U16)128,(U16)20,BmpLogo},
						   {BMP_SETSOUNDADJ_NO,(U16)80,(U16)52,SetsoundAdjBMP},
						   {BMP_FISH_NO,(U16)64,(U16)40,fishBmp},
};

/*****************************************************************************
* ID			 : 1.0
* Outline		 : LCD draw line
* Include		 : none
* Declaration	 : void OLED_DrawLine(U8 PosStartX,U8 PosStartY,U8 DrawLine)
* Description	 : LCD draw vertical line
* Argument 		 : PosStartX, X axis
				 : PosStartY, Y axis
				 : PosEndX, X axis
				 : PosEndY, Y axis
* Return Value 	 : void
* Calling Functions : none
*****************************************************************************/
void OLED_DrawLine(U16 PosStartX,U16 PosStartY,U16 PosEndX,U16 PosEndY,U8 col)
{
	if(PosStartX == PosEndX)
	{
		drv_OLED_GraphicLineV(PosStartX,PosStartY,abs(PosEndY - PosStartY+1),col);
	}else if(PosStartY == PosEndY)
	{
		drv_OLED_GraphicLineH(PosStartX, PosStartY,abs(PosEndX-PosStartX+1),col);
	}else
	{
		/*nothing to do*/
	}
}

/*****************************************************************************
* ID			 : 1.0
* Outline		 : LCD draw line Transparent
* Include		 : none
* Declaration	 : void OLED_DrawLineT(U8 PosStartX,U8 PosStartY,U8 DrawLine)
* Description	 : LCD draw vertical line
* Argument 		 : PosStartX, X axis
: PosStartY, Y axis
: PosEndX, X axis
: PosEndY, Y axis
* Return Value 	 : void
* Calling Functions : none
*****************************************************************************/
void OLED_DrawLineT(U16 PosStartX,U16 PosStartY,U16 PosEndX,U16 PosEndY,U8 col)
{
	if(PosStartX == PosEndX)
	{
		drv_OLED_GraphicLineVT(PosStartX,PosStartY,abs(PosEndY - PosStartY+1),col);
	}else
	{
		/*Nothing to do*/
	}
}
/*****************************************************************************
* ID				 : 1.0
* Outline			 : LCD draw dot
* Include			 : none
* Declaration		 : void OLED_DrawDot(U8 PosStartX,U8 PosStartY)
* Description		 : LCD draw dot
* Argument 			 : PosStartX, X axis
					 : PosStartY, Y axis
* Return Value 		 : void
* Calling Functions  : none
*****************************************************************************/
#if 0
void OLED_DrawDot(U8 PosStartX,U8 PosStartY)
{

}
#endif

/*****************************************************************************
* ID				 : 1.0
* Outline			 : LCD draw box
* Include			 : none
* Declaration		 : void OLED_DrawBox(U8 PosStartX,U8 PosStartY,U8 PosEndX,U8 PosEndY,U8 fill)
* Description		 : LCD draw box
* Argument 			 : PosStartX, X axis
					   PosStartY, Y axis
					   PosEndX
					   PosEndY
					   fill, 1.fill box  0.just frame
* Return Value 		 : void
* Calling Functions  : none
*****************************************************************************/
void OLED_DrawBox(U16 PosStartX,U16 PosStartY,U16 PosEndX,U16 PosEndY,U8 fill,U8 col1,U8 col2)
{

	U8 u8_i;
	
	drv_OLED_GraphicLineV(PosStartX,PosStartY,abs(PosEndY-PosStartY),col1);
	drv_OLED_GraphicLineV(PosEndX,PosStartY,abs(PosEndY-PosStartY),col1);
	drv_OLED_GraphicLineH(PosStartX,PosStartY,abs(PosEndX-PosStartX),col1);
	drv_OLED_GraphicLineH(PosStartX,PosEndY,abs(PosEndX-PosStartX),col1);

	if(fill)
	{
		for(u8_i=0U;u8_i<(PosEndY-PosStartY-1U);u8_i++)
		{
			drv_OLED_GraphicLineH(PosStartX+1U,PosStartY+u8_i+1U,abs(PosEndX-PosStartX)-1U,col2);
		}
	}
}

void if_disp_clear()
{
	drv_OLED_Clear((U8)0x00);
}

/*****************************************************************************
* ID				 : 1.0
* Outline			 : LCD draw bmp
* Include			 : none
* Declaration		 : void OLED_DrawBmp(U8 PosStartX,U8 PosStartY,U8 BmpNo)
* Description		 : LCD draw bmp
* Argument 			 : PosStartX X axis
					 : PosStartY Y axis 
					 : BmpNo bmp number
* Return Value 		 : void
* Calling Functions  : none
*****************************************************************************/
void OLED_DrawBmp(U16 PosStartX,U16 PosStartY,U8 BmpNo)
{
	U16 width;
	U16 hight;
	U8 const * bmp_address;
	U8 bmp_buf[34];
	U16 bmp_y;
	U8 bmp_cell_num;
	U8 lcd_offend;
	U8 u8_i;

	if(PosStartX>OLED_MAXLINE)
	{
		return;
	}

	lcd_offend = (U8)(PosStartX%OLED_CELL_LINE);

	width = bmp_info[BmpNo].bmp_width;
	hight = bmp_info[BmpNo].bmp_hight;
	bmp_address = bmp_info[BmpNo].bmp_address;
	bmp_cell_num = (U8)((width+7U)/8U);

	for (bmp_y = 0U;bmp_y<hight;bmp_y++)
	{
		bmp_cell_num = (U8)((width+7U)/8U);
		
		for (u8_i=0U;u8_i<bmp_cell_num;u8_i++)
		{
			bmp_buf[u8_i]= (bmp_address)[(bmp_y*bmp_cell_num)+u8_i];

		}

		if (lcd_offend)
		{
			bmp_buf[bmp_cell_num-1U]= bmp_buf[bmp_cell_num-1U]>>lcd_offend;
			for(u8_i = bmp_cell_num-1U;u8_i>0U;u8_i--)
			{
				bmp_buf[u8_i]|=(bmp_buf[u8_i-1U]<<(8U-lcd_offend));
				bmp_buf[u8_i-1U]=bmp_buf[u8_i-1U]>>lcd_offend;				
			}
		} 

		drv_OLED_GraphicWrite(PosStartX+16U,PosStartY+bmp_y,width,1U,bmp_buf,(U16)bmp_cell_num);
	}
}
/*****************************************************************************
* ID				 : 1.0
* Outline			 : LCD draw Progress bar
* Include			 : none
* Declaration		 : void Draw_PlayTimeProgressFrame(U8 PosStartX,U8 PosStartY,U16 Progress,U8 flag)
* Description		 : Progress bar
* Argument 			 : PosStartX, X axis
					   PosStartY, Y axis
					   flag, 0:no frame 1:draw frame
* Return Value 		 : void
* Calling Functions  : none
*****************************************************************************/
void Draw_PlayTimeProgressFrame(U16 PosStartX,U16 PosStartY,U16 Progress ,U8 flag)
{

	U8 u8_i;
	U16 Progress_X;
	static U16 Old_progress = 0U;

	Progress_X = (PosStartX&0xFFFCU)+3U;

	if(flag==REDRAW)
	{
		OLED_DrawBox(Progress_X,PosStartY,Progress_X+PLAY_TIME_PROGRESS_LEN,PosStartY+PLAY_TIME_PROGRESS_HIGHT,1U,0x00U,0x00U);
		drv_OLED_GraphicLineV(Progress_X,PosStartY+1U,PLAY_TIME_PROGRESS_HIGHT-2U,0x0cU);

		drv_OLED_GraphicLineV(Progress_X+PLAY_TIME_PROGRESS_LEN+1U,PosStartY+1U,PLAY_TIME_PROGRESS_HIGHT-2U,0x0cU);

		drv_OLED_GraphicLineH(Progress_X+1U,(PosStartY+PLAY_TIME_PROGRESS_HIGHT)-1U,PLAY_TIME_PROGRESS_LEN,0x0cU);
		drv_OLED_GraphicLineH(Progress_X+1U,PosStartY,PLAY_TIME_PROGRESS_LEN,0x0cU);
	}

	for(u8_i=0U;u8_i<(PLAY_TIME_PROGRESS_HIGHT-2U);u8_i++)
	{
		drv_OLED_GraphicLineH(Progress_X+1U,PosStartY+u8_i+1U,Progress,0x05U);

		if (Progress<Old_progress)
		{
			drv_OLED_GraphicLineH(Progress_X+1U+Progress,PosStartY+u8_i+1U,Old_progress-Progress,0x00U);
		}
	}
	Old_progress = Progress;
}

/* End of file */
